/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTran/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NoteContractInterface extends ethers.utils.Interface {
  functions: {
    "getNote(address)": FunctionFragment;
    "newNote(address,string,string,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerShip(address)": FunctionFragment;
    "updateNote(address,address,string,string,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getNote", values: [string]): string;
  encodeFunctionData(
    functionFragment: "newNote",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerShip", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateNote",
    values: [string, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerShip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateNote", data: BytesLike): Result;

  events: {};
}

export class NoteContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NoteContractInterface;

  functions: {
    getNote(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber] & {
          acauntAddr: string;
          name: string;
          surname: string;
          age: BigNumber;
        }
      ] & {
        _note: [string, string, string, BigNumber] & {
          acauntAddr: string;
          name: string;
          surname: string;
          age: BigNumber;
        };
      }
    >;

    newNote(
      _acauntAddr: string,
      _name: string,
      _surname: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerShip(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNote(
      _user: string,
      _acauntAddr: string,
      _name: string,
      _surname: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getNote(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      acauntAddr: string;
      name: string;
      surname: string;
      age: BigNumber;
    }
  >;

  newNote(
    _acauntAddr: string,
    _name: string,
    _surname: string,
    _age: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerShip(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNote(
    _user: string,
    _acauntAddr: string,
    _name: string,
    _surname: string,
    _age: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getNote(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        acauntAddr: string;
        name: string;
        surname: string;
        age: BigNumber;
      }
    >;

    newNote(
      _acauntAddr: string,
      _name: string,
      _surname: string,
      _age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerShip(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateNote(
      _user: string,
      _acauntAddr: string,
      _name: string,
      _surname: string,
      _age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getNote(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    newNote(
      _acauntAddr: string,
      _name: string,
      _surname: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerShip(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNote(
      _user: string,
      _acauntAddr: string,
      _name: string,
      _surname: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getNote(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newNote(
      _acauntAddr: string,
      _name: string,
      _surname: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerShip(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNote(
      _user: string,
      _acauntAddr: string,
      _name: string,
      _surname: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
